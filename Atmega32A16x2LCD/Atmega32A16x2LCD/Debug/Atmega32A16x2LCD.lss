
Atmega32A16x2LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c3  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000658  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038f  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  000016b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037c  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  7a:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_display_send_byte>:
	lcd_display_send_byte(0x01, 0);  //clear display
}

void lcd_display_send_byte(unsigned char byte, unsigned char is_data)
{
	PORTC = (PORTC & 0x0F) | (byte & 0xF0);
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	95 bb       	out	0x15, r25	; 21
	PORTC = (PORTC & 0xFE) | (is_data & 0x01);
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	61 70       	andi	r22, 0x01	; 1
  92:	9e 7f       	andi	r25, 0xFE	; 254
  94:	96 2b       	or	r25, r22
  96:	95 bb       	out	0x15, r25	; 21
	PORTC = PORTC | 0x02;
  98:	a9 9a       	sbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef ed       	ldi	r30, 0xDF	; 223
  9c:	fe e2       	ldi	r31, 0x2E	; 46
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_display_send_byte+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_display_send_byte+0x22>
  a4:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	
	PORTC &= 0xFC;
  a6:	95 b3       	in	r25, 0x15	; 21
  a8:	9c 7f       	andi	r25, 0xFC	; 252
  aa:	95 bb       	out	0x15, r25	; 21
	PORTC = (PORTC & 0x0F) | ((byte << 4) & 0xF0);
  ac:	25 b3       	in	r18, 0x15	; 21
  ae:	2f 70       	andi	r18, 0x0F	; 15
  b0:	f0 e1       	ldi	r31, 0x10	; 16
  b2:	8f 9f       	mul	r24, r31
  b4:	c0 01       	movw	r24, r0
  b6:	11 24       	eor	r1, r1
  b8:	82 2b       	or	r24, r18
  ba:	85 bb       	out	0x15, r24	; 21
	PORTC = (PORTC & 0xFE) | (is_data & 0x01);
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	8e 7f       	andi	r24, 0xFE	; 254
  c0:	68 2b       	or	r22, r24
  c2:	65 bb       	out	0x15, r22	; 21
	PORTC = PORTC | 0x02;
  c4:	a9 9a       	sbi	0x15, 1	; 21
  c6:	8f ed       	ldi	r24, 0xDF	; 223
  c8:	9e e2       	ldi	r25, 0x2E	; 46
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_display_send_byte+0x48>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_display_send_byte+0x4e>
  d0:	00 00       	nop
	_delay_ms(LCD_DELAY_MS);
	
	PORTC &= 0xFC;
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	85 bb       	out	0x15, r24	; 21
  d8:	08 95       	ret

000000da <lcd_display_init>:
#define MAX_CHARS_PER_ROW 16


void lcd_display_init(void)
{
	DDRC = 0xFF;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 bb       	out	0x14, r24	; 20
	lcd_display_send_byte(0x03, 0);
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	9c e7       	ldi	r25, 0x7C	; 124
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <lcd_display_init+0x10>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_display_init+0x16>
  f0:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	lcd_display_send_byte(0x03, 0);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	9c e7       	ldi	r25, 0x7C	; 124
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_display_init+0x24>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_display_init+0x2a>
 104:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	lcd_display_send_byte(0x03, 0);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	9c e7       	ldi	r25, 0x7C	; 124
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_display_init+0x38>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_display_init+0x3e>
 118:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	lcd_display_send_byte(0x02, 0);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9c e7       	ldi	r25, 0x7C	; 124
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_display_init+0x4c>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_display_init+0x52>
 12c:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	lcd_display_send_byte(0x0C, 0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	9c e7       	ldi	r25, 0x7C	; 124
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_display_init+0x60>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_display_init+0x66>
 140:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	lcd_display_send_byte(0x01, 0);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	9c e7       	ldi	r25, 0x7C	; 124
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_display_init+0x74>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_display_init+0x7a>
 154:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	lcd_display_send_byte(0x80, 0);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	80 e8       	ldi	r24, 0x80	; 128
 15a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9c e7       	ldi	r25, 0x7C	; 124
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_display_init+0x88>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_display_init+0x8e>
 168:	00 00       	nop
	_delay_ms(LCD_INIT_DELAY_MS);
	lcd_display_send_byte(0x01, 0);  //clear display
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>
 172:	08 95       	ret

00000174 <lcd_display_put_string>:
}


// display string
void lcd_display_put_string(const char *_string)
{
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	8c 01       	movw	r16, r24
 182:	7c 01       	movw	r14, r24
	int ch_index;
	for(ch_index = 0; ch_index < strlen(_string); ch_index ++)
 184:	c0 e0       	ldi	r28, 0x00	; 0
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	07 c0       	rjmp	.+14     	; 0x198 <lcd_display_put_string+0x24>
	{
		lcd_display_send_byte(_string[ch_index], 1);
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	f7 01       	movw	r30, r14
 18e:	81 91       	ld	r24, Z+
 190:	7f 01       	movw	r14, r30
 192:	0e 94 41 00 	call	0x82	; 0x82 <lcd_display_send_byte>

// display string
void lcd_display_put_string(const char *_string)
{
	int ch_index;
	for(ch_index = 0; ch_index < strlen(_string); ch_index ++)
 196:	21 96       	adiw	r28, 0x01	; 1
 198:	f8 01       	movw	r30, r16
 19a:	01 90       	ld	r0, Z+
 19c:	00 20       	and	r0, r0
 19e:	e9 f7       	brne	.-6      	; 0x19a <lcd_display_put_string+0x26>
 1a0:	31 97       	sbiw	r30, 0x01	; 1
 1a2:	e0 1b       	sub	r30, r16
 1a4:	f1 0b       	sbc	r31, r17
 1a6:	ce 17       	cp	r28, r30
 1a8:	df 07       	cpc	r29, r31
 1aa:	78 f3       	brcs	.-34     	; 0x18a <lcd_display_put_string+0x16>
	{
		lcd_display_send_byte(_string[ch_index], 1);
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	ff 90       	pop	r15
 1b6:	ef 90       	pop	r14
 1b8:	08 95       	ret

000001ba <main>:



int main(void)
{
	lcd_display_init();
 1ba:	0e 94 6d 00 	call	0xda	; 0xda <lcd_display_init>
	lcd_display_put_string("ScorpionIPX");
 1be:	80 e6       	ldi	r24, 0x60	; 96
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_display_put_string>
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <main+0xc>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
